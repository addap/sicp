#lang sicp

;arithmetic procedures
(define (add-complex z1 z2)
  (make-from-real-imag (+ (real-part z1) (real-part z2))
                       (+ (imag-part z1) (imag-part z2))))
(define (sub-complex z1 z2)
  (make-from-real-imag (- (real-part z1) (real-part z2))
                       (- (imag-part z1) (imag-part z2))))
(define (mul-complex z1 z2)
  (make-from-mag-ang (* (magnitude z1) (magnitude z2))
                     (+ (angle z1) (angle z2))))
(define (div-complex z1 z2)
  (make-from-mag-ang (/ (magnitude z1) (magnitude z2))
                     (- (angle z1) (angle z2))))

;constructors
(define (make-from-real-imag x y)
  (make-from-real-imag-rectangular x y))
(define (make-from-mag-ang r a)
  (make-from-mag-ang-polar r a))

;rectangular implementation
(define (square x)(* x x))
(define (real-part-rectangular z) (car z))
(define (imag-part-rectangular z) (cdr z))
(define (magnitude-rectangular z)
  (sqrt (+ (square (real-part-rectangular z))
           (square (imag-part-rectangular z)))))
(define (angle-rectangular z)
  (atan (imag-part-rectangular z)
        (real-part-rectangular z)))
(define (make-from-real-imag-rectangular x y)
  (attach-tag 'rectangular (cons x y)))
(define (make-from-mag-ang-rectangular r a)
  (attach-tag 'rectangular
              (cons (* r (cos a)) (* r (sin a)))))

;polar implementation
(define (real-part-polar z)
  (* (magnitude-polar z) (cos (angle-polar z))))
(define (imag-part-polar z)
  (* (magnitude-polar z) (sin (angle-polar z))))
(define (magnitude-polar z) (car z))
(define (angle-polar z) (cdr z))
(define (make-from-real-imag-polar x y)
  (attach-tag 'polar
              (cons (sqrt (+ (square x) (square y)))
                    (atan y x))))
(define (make-from-mag-ang-polar r a)
  (attach-tag 'polar (cons r a)))

;tag-type procedures
(define (attach-tag type-tag contents)
  (cons type-tag contents))
(define (type-tag datum)
  (if (pair? datum)
      (car datum)
      (display "Bad tagged datum: TYPE_TAG" datum)))
(define (contents datum)
  (if (pair? datum)
      (cdr datum)
      (display "Bad tagged datum: CONTENTS" datum)))

;predicates
(define (rectangular? z)
  (eq? (type-tag z) 'rectangular))
(define (polar? z)
  (eq? (type-tag z) 'polar))

;selectors
(define (real-part z)
  (cond ((rectangular? z)
         (real-part-rectangular (contents z)))
        ((polar? z)
         (real-part-polar (contents z)))
        (else (display "Unknown type: REAL-PART" z))))
(define (imag-part z)
  (cond ((rectangular? z)
         (imag-part-rectangular (contents z)))
        ((polar? z)
         (imag-part-polar (contents z)))
        (else (display "Unknown type: IMAG-PART" z))))
(define (magnitude z)
  (cond ((rectangular? z)
         (magnitude-rectangular (contents z)))
        ((polar? z)
         (magnitude-polar (contents z)))
        (else (display "Unknown type: MAGNITUDE" z))))
(define (angle z)
  (cond ((rectangular? z)
         (angle-rectangular (contents z)))
        ((polar? z)
         (angle-polar (contents z)))
        (else (display "Unknown type: ANGLE" z))))

;2.73
; a)
; The procedure was rewritten to comply with a data-directed style
; We can't assimilate number? and variable? for two reasons:
; 1. the data associated with them does not use an operator which we use as a type tag
; 2. We don't call any procedure on the data if it is a number or a variable, just return a constant so there is no need
; to include it.

; b)
; symbolic differentiation
(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (=number? exp num) (and (number? exp) (= exp num)))

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var) 1 0))
        (else ((get 'deriv (operator exp))
               (operands exp) var))))
(define (operator exp) (car exp))
(define (operand exp) (cdr exp))

(define (install-sum-deriv-package)
  (define (make-sum a1 a2)
    (cond ((=number? a1 0) a2)
          ((=number? a2 0) a1)
          ((and (number? a1) (number? a2))
           (+ a1 a2))
          (else (tag (list a1 a2)))))
  (define (tag x) (attach-tag '+ x))
  (define (addend s) (car s))
  (define (augend s) (cadr s))
  (define (derive ops var)
    (make-sum (deriv (addend ops) var)
              (deriv (augend ops) var)))
  (put 'deriv '+ derive)
  (put 'constructor '+ make-sum)
  'done)

(define (install-prod-deriv-package)
  (define (make-product m1 m2)
    (cond ((or (=number? m1 0) (=number? m2 0)) 0)
          ((=number? m1 1) m2)
          ((=number? m2 1) m1)
          ((and (number? m1) (number? m2)) (* m1 m2))
          (else (tag (list m1 m2)))))
  (define (tag x) (attach-tag '* x))
  (define (multiplier m) (car m))
  (define (multiplicant m) (cadr m))
  (define (derive ops var)
    ((get 'constructor '+)
     (make-product (multiplier ops)
                   (deriv (multiplicant ops) var))
     (make-product (deriv (multiplier ops) var)
                   (multiplicant ops))))
  (put 'deriv '* derive)
  (put 'constructor '* make-product)
  'done)

; c)
(define (install-exp-deriv-package)
  (define (make-exponentiation base expt)
    (cond ((= expt 0) 1) 
          ((= expt 1) base)
          ;((and (number? base) (number? expt)) (fast-expt base expt))
          (else (tag (list base expt)))))
  (define (tag x) (attach-tag '** x))
  (define (base e) (car e))
  (define (exponent e) (cadr e))
  (define (derive ops var)
    ((get 'constructor '*)
     (exponent ops)
     (make-exponentiation (base ops) (- (exponent ops) 1))))
  (put 'deriv '** derive)
  'done)

; d)
; You just have to edit all the put's to reflect this change
; -> (put '+ 'deriv derive)
    
