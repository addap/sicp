#lang sicp
; 2.58a derivation function that supports infix notation
(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (=number? exp num) (and (number? exp) (= exp num)))

(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2))
         (+ a1 a2))
        (else (list a1 '+ a2))))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list m1 '* m2))))
(define (sum? x) (and (pair? x) (not (product? x)) (eq? (cadr x) '+)))
(define (addend s)
  (cons (car s)
        (if (eq? (cdr s) '+)
            nil
            (addend (cdr s)))))
(define (augend s)
  (if (eq? (car s) '+)
      (cdr s)
      (augend (cdr s))))
(define (product? x) 
  (if (pair? x)
      (cond ((null? (cdr x)) #f)
            ((eq? (car x) '*) #t)
            (else (product? (cdr x))))))
(define (multiplier p)
  (cons (car p)
        (if (eq? (cdr p) '*)
            nil
            (multiplier (cdr p)))))
(define (multiplicant p)
  (if (eq? (car p) '*)
      (cdr p)
      (multiplicant (cdr p))))

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var) 1 0))
        ((sum? exp) (make-sum (deriv (addend exp) var)
                              (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product (multiplier exp)
                        (deriv (multiplicant exp) var))
          (make-product (deriv (multiplier exp) var)
                        (multiplicant exp))))
        (else
         (display "unknown expression type: DERIV" exp))))